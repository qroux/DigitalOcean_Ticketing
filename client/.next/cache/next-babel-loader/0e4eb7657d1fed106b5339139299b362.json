{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport useRequest from '../../hooks/use-request';\nimport Router from 'next/router';\n\nconst OrderShow = ({\n  order,\n  currentUser\n}) => {\n  const {\n    0: timeLeft,\n    1: setTimeLeft\n  } = useState(0);\n  const {\n    doRequest,\n    errors\n  } = useRequest({\n    url: '/api/payments',\n    method: 'post',\n    body: {\n      orderId: order.id\n    },\n    onSuccess: payment => Router.push('/orders')\n  });\n  useEffect(() => {\n    const findTimeLeft = () => {\n      const msLeft = new Date(order.expiresAt) - new Date();\n      setTimeLeft(Math.round(msLeft / 1000));\n    };\n\n    findTimeLeft();\n    const timerId = setInterval(findTimeLeft, 1000);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, [order]);\n\n  if (timeLeft < 0) {\n    return __jsx(\"div\", null, \"Order Expired\");\n  }\n\n  return __jsx(\"div\", null, errors, __jsx(\"div\", null, \"Time left to pay: \", timeLeft, \" seconds\"), __jsx(StripeCheckout, {\n    token: ({\n      id\n    }) => doRequest({\n      token: id\n    }),\n    stripeKey: \"pk_test_DndeUtX95wNk2199Jh90AzLi\",\n    amount: order.ticket.price * 100,\n    email: currentUser.email\n  }));\n};\n\nOrderShow.getInitialProps = async (context, client) => {\n  const {\n    orderId\n  } = context.query;\n  const {\n    data\n  } = await client.get(`/api/orders/${orderId}`);\n  return {\n    order: data\n  };\n};\n\nexport default OrderShow;","map":null,"metadata":{},"sourceType":"module"}